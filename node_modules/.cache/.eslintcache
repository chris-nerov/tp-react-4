[{"/Users/benji/Downloads/React-workshop-main-main/src/index.tsx":"1","/Users/benji/Downloads/React-workshop-main-main/src/reportWebVitals.ts":"2","/Users/benji/Downloads/React-workshop-main-main/src/App.tsx":"3","/Users/benji/Downloads/React-workshop-main-main/src/components/PostsList.tsx":"4","/Users/benji/Downloads/React-workshop-main-main/src/components/EditPost.tsx":"5","/Users/benji/Downloads/React-workshop-main-main/src/components/UserProfile.tsx":"6","/Users/benji/Downloads/React-workshop-main-main/src/components/AllUsers.tsx":"7","/Users/benji/Downloads/React-workshop-main-main/src/private/Header.tsx":"8","/Users/benji/Downloads/React-workshop-main-main/src/components/PostItem.tsx":"9","/Users/benji/Downloads/React-workshop-main-main/src/private/Field.tsx":"10","/Users/benji/Downloads/React-workshop-main-main/src/components/ImageGalleryPicker.tsx":"11","/Users/benji/Downloads/React-workshop-main-main/src/api/post.ts":"12","/Users/benji/Downloads/React-workshop-main-main/src/private/SelectedImage.tsx":"13","/Users/benji/Downloads/React-workshop-main-main/src/private/Checkmark.tsx":"14","/Users/benji/Downloads/React-workshop-main-main/src/api/user.ts":"15"},{"size":500,"mtime":1649751307000,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1649751307000,"results":"18","hashOfConfig":"17"},{"size":850,"mtime":1649751307000,"results":"19","hashOfConfig":"17"},{"size":1279,"mtime":1649751307000,"results":"20","hashOfConfig":"17"},{"size":7122,"mtime":1649754681491,"results":"21","hashOfConfig":"17"},{"size":1142,"mtime":1649751307000,"results":"22","hashOfConfig":"17"},{"size":95,"mtime":1649751307000,"results":"23","hashOfConfig":"17"},{"size":1617,"mtime":1649751307000,"results":"24","hashOfConfig":"17"},{"size":1732,"mtime":1649751307000,"results":"25","hashOfConfig":"17"},{"size":336,"mtime":1649751307000,"results":"26","hashOfConfig":"17"},{"size":2739,"mtime":1649751307000,"results":"27","hashOfConfig":"17"},{"size":1455,"mtime":1649751307000,"results":"28","hashOfConfig":"17"},{"size":2684,"mtime":1649751307000,"results":"29","hashOfConfig":"17"},{"size":846,"mtime":1649751307000,"results":"30","hashOfConfig":"17"},{"size":1681,"mtime":1649751307000,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qhrho2",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/benji/Downloads/React-workshop-main-main/src/index.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/reportWebVitals.ts",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/App.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/components/PostsList.tsx",["85"],[],"import React, { useEffect, useState } from 'react'\nimport { getPosts } from '../api/post'\nimport { Post } from '../api/types'\nimport PostItem from './PostItem'\n\nconst PostsList = () => {\n    const [posts, setPosts] = useState<Array<Post>>([])\n    const [loading, setLoading] = useState(false)\n\n    // getPosts()\n\n    async function _getPosts() {\n        console.log(\"useEffect\");\n        const data = await getPosts();\n        console.log(data)\n        setPosts(data);\n    }\n\n    useEffect(() => {\n        _getPosts();\n    }, [])\n\n    function renderItem(values: Post) {\n        return (\n            <div key={values.id}>\n                <PostItem {...values} />\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">Loading ...</p>\n                </div>\n            </section>\n        )\n    }\n\n    if (posts.length === 0) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">No Posts</p>\n                </div>\n            </section>\n        )\n    }\n\n    return <ul className=\"post-list\">{posts.map(renderItem)}</ul>\n}\n\nexport default PostsList\n","/Users/benji/Downloads/React-workshop-main-main/src/components/EditPost.tsx",["86","87","88","89"],[],"/Users/benji/Downloads/React-workshop-main-main/src/components/UserProfile.tsx",["90","91"],[],"import React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { User } from '../api/types'\nimport Field from '../private/Field'\n\nconst UserProfile = () => {\n    const [author, setAuthor] = useState<User | null>(null)\n\n    let { id } = useParams() // get the id from url\n\n    return (\n        author && (\n            <div className=\"user-profile-wrapper\">\n                <Field label=\"Name\">\n                    <span>{author.name}</span>\n                </Field>\n                <Field label=\"Email\">\n                    <span>{author.email}</span>\n                </Field>\n                <Field label=\"Company\">\n                    <span>{author.company.name}</span>\n                </Field>\n                <Field label=\"Phone\">\n                    <span>{author.phone}</span>\n                </Field>\n                <Field label=\"Address\">\n                    <span>{author.address.street} - </span>\n                    <span>{author.address.city} - </span>\n                    <span>{author.address.zipcode}</span>\n                </Field>\n            </div>\n        )\n    )\n}\n\nexport default UserProfile\n","/Users/benji/Downloads/React-workshop-main-main/src/components/AllUsers.tsx",["92"],[],"import React from 'react'\n\nconst AllUsers = () => {\n    return null\n}\n\nexport default AllUsers\n","/Users/benji/Downloads/React-workshop-main-main/src/private/Header.tsx",["93","94","95"],[],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n    return (\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"#\">\n                    <img src=\"/wsf-logo.png\" />\n                </a>\n                <a\n                    role=\"button\"\n                    className=\"navbar-burger\"\n                    aria-label=\"menu\"\n                    aria-expanded=\"false\"\n                    data-target=\"navbarBasicExample\"\n                >\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                </a>\n            </div>\n\n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">\n                        <Link to=\"/\" className=\"navbar-item\">\n                            Home\n                        </Link>\n                        <Link to=\"/post/new\" className=\"navbar-item\">\n                            New post\n                        </Link>\n                        <Link to=\"/users/new\" className=\"navbar-item\">\n                            New user\n                        </Link>\n                        <Link to=\"/users\" className=\"navbar-item\">\n                            All users\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header\n","/Users/benji/Downloads/React-workshop-main-main/src/components/PostItem.tsx",["96","97"],[],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Post, User } from '../api/types'\n\nconst PostItem = (props: Post) => {\n    const [author, setAuthor] = useState<User | null>(null)\n\n    return (\n        <Link to={`/post/${props.id}`} key={`key-${props.id}`}>\n            <div className=\"card\">\n                <div className=\"card-image\">\n                    <figure className=\"image is-4by3\">\n                        <img\n                            src={\n                                props.postImageUrl ||\n                                'https://picsum.photos/1280/960'\n                            }\n                            alt=\"Placeholder image\"\n                        />\n                    </figure>\n                </div>\n                <div className=\"card-content\">\n                    <div className=\"media\">\n                        <div className=\"media-content\">\n                            <p className=\"title is-4 post-title\">\n                                {props.title}\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"content post-content\">{props.body}</div>\n                    {author && (\n                        <footer className=\"card-footer\">\n                            <Link\n                                to={`/users/${author.id}`}\n                                className=\"card-footer-item\"\n                            >\n                                {author ? author.name : 'not defined'}\n                            </Link>\n                        </footer>\n                    )}\n                </div>\n            </div>\n        </Link>\n    )\n}\n\nexport default PostItem\n","/Users/benji/Downloads/React-workshop-main-main/src/private/Field.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/components/ImageGalleryPicker.tsx",["98","99"],[],"import React, { useState, useCallback } from 'react'\nimport Gallery from 'react-photo-gallery'\nimport { Picker_Picture, API_Picture } from '../api/types'\nimport SelectedImage from '../private/SelectedImage'\n\ntype ImageGalleryPickerProps = {\n    onClose: () => void\n    onSubmit: (picture: Picker_Picture) => void\n}\n\nconst ImageGalleryPicker = ({ onClose, onSubmit }: ImageGalleryPickerProps) => {\n    const [selectedPicture, setSelectedPicture] =\n        useState<null | Picker_Picture>(null)\n    const [pictures, setPictures] = useState<Array<API_Picture>>([])\n\n    async function getPicture() {\n        // [TODO] Fetch picture\n    }\n    function handleOnClick(picture: Picker_Picture) {\n        setSelectedPicture(picture)\n    }\n\n    const imageRenderer = useCallback(\n        ({ index, left, top, key, photo }) => (\n            <SelectedImage\n                onClick={handleOnClick}\n                selected={\n                    selectedPicture ? selectedPicture.id === photo.id : false\n                }\n                key={key}\n                margin={'2px'}\n                index={index}\n                photo={photo}\n                left={left}\n                top={top}\n            />\n        ),\n        [selectedPicture]\n    )\n\n    function handleOnSubmit() {\n        onClose()\n        if (selectedPicture) {\n            onSubmit(selectedPicture)\n        }\n    }\n\n    const rawPictures = pictures.map((picture) => ({\n        src: picture.download_url,\n        width: 4,\n        height: 3,\n        id: picture.id,\n    }))\n\n    return (\n        <div className=\"modal post-image-modal\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">Select a picture</p>\n                    <button\n                        className=\"delete\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    />\n                </header>\n                <section className=\"modal-card-body\">\n                    <Gallery photos={rawPictures} renderImage={imageRenderer} />\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <button\n                        disabled={!!!selectedPicture}\n                        className=\"button is-success\"\n                        onClick={handleOnSubmit}\n                    >\n                        Save changes\n                    </button>\n                    <button className=\"button\" onClick={onClose}>\n                        Cancel\n                    </button>\n                </footer>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageGalleryPicker\n","/Users/benji/Downloads/React-workshop-main-main/src/api/post.ts",["100","101"],[],"import { Post, PostContent } from './types'\nimport axios from 'axios'\nimport { responsiveFontSizes } from '@mui/material';\n\nconst base_url = 'http://localhost:3004/posts'\n\nasync function getPost(postID: Post['id']): Promise<Post> {\n    // get a unique post\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(`${base_url}/${postID}`);\n    return await response.json();\n}\n\nasync function getPosts(): Promise<Array<Post>> {\n    // get all posts\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(base_url)\n    const data = await response.json();\n    return data;\n}\n\nasync function createPost(post: PostContent): Promise<Post> {\n    // create a new post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function updatePost(post: Post): Promise<Post> {\n    // update a existing post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\n    // delete a existing post\n    // [TODO] remove this return to use a fetch API\n    return 1\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost }\n","/Users/benji/Downloads/React-workshop-main-main/src/private/SelectedImage.tsx",["102"],[],"import React, { useState, useEffect } from 'react'\nimport { RenderImageProps } from 'react-photo-gallery'\nimport CSS from 'csstype'\nimport { Picker_Picture } from '../api/types'\nimport Checkmark from './Checkmark'\n\nconst imgStyle = {\n    height: '100%',\n    transition:\n        'transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s',\n}\nconst selectedImgStyle = {\n    transform: 'translateZ(0px) scale3d(0.9, 0.9, 1)',\n    transition:\n        'transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s',\n}\ntype Cont = {\n    left?: number | undefined\n    top?: number | undefined\n    backgroundColor: CSS.Properties['backgroundColor']\n    cursor: CSS.Properties['cursor']\n    overflow: CSS.Properties['overflow']\n    position: CSS.Properties['position']\n}\nconst cont: Cont = {\n    backgroundColor: '#eee',\n    cursor: 'pointer',\n    overflow: 'hidden',\n    position: 'relative',\n}\n\ntype SelectedImageProps = {\n    index: number\n    margin: CSS.Properties['margin']\n    direction?: RenderImageProps['direction']\n    selected: boolean\n    photo: Picker_Picture\n    top: RenderImageProps['top']\n    left: RenderImageProps['left']\n    onClick: (picture: Picker_Picture) => void\n}\n\nconst SelectedImage = ({\n    photo,\n    margin,\n    direction,\n    top,\n    left,\n    selected,\n    onClick,\n}: SelectedImageProps) => {\n    const [isSelected, setIsSelected] = useState(selected)\n    //calculate x,y scale\n    const sx = (100 - (30 / photo.width) * 100) / 100\n    const sy = (100 - (30 / photo.height) * 100) / 100\n    selectedImgStyle.transform = `translateZ(0px) scale3d(${sx}, ${sy}, 1)`\n\n    if (direction === 'column') {\n        cont.position = 'absolute'\n        cont.left = left\n        cont.top = top\n    }\n\n    const handleOnClick = (\n        e: React.MouseEvent<HTMLImageElement, MouseEvent>\n    ) => {\n        setIsSelected(!isSelected)\n        onClick(photo)\n    }\n\n    useEffect(() => {\n        setIsSelected(selected)\n    }, [selected])\n\n    return (\n        <div\n            style={{\n                margin,\n                height: photo.height,\n                width: photo.width,\n                ...cont,\n            }}\n            className={!isSelected ? 'not-selected' : ''}\n        >\n            <Checkmark selected={isSelected ? true : false} />\n            <img\n                style={\n                    isSelected\n                        ? { ...imgStyle, ...selectedImgStyle }\n                        : { ...imgStyle }\n                }\n                {...photo}\n                onClick={handleOnClick}\n            />\n            <style>{`.not-selected:hover{outline:2px solid #06befa}`}</style>\n        </div>\n    )\n}\n\nexport default SelectedImage\n","/Users/benji/Downloads/React-workshop-main-main/src/private/Checkmark.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/api/user.ts",["103"],[],{"ruleId":"104","severity":1,"message":"105","line":8,"column":21,"nodeType":"106","messageId":"107","endLine":8,"endColumn":31},{"ruleId":"104","severity":1,"message":"108","line":3,"column":19,"nodeType":"106","messageId":"107","endLine":3,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":40,"column":8,"nodeType":"111","endLine":40,"endColumn":12,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":89,"column":68,"nodeType":"115","messageId":"116","endLine":89,"endColumn":70},{"ruleId":"117","severity":1,"message":"118","line":173,"column":25,"nodeType":"119","endLine":173,"endColumn":59},{"ruleId":"104","severity":1,"message":"120","line":7,"column":20,"nodeType":"106","messageId":"107","endLine":7,"endColumn":29},{"ruleId":"104","severity":1,"message":"121","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":13},{"ruleId":"104","severity":1,"message":"122","line":1,"column":8,"nodeType":"106","messageId":"107","endLine":1,"endColumn":13},{"ruleId":"123","severity":1,"message":"124","line":8,"column":17,"nodeType":"119","endLine":8,"endColumn":53},{"ruleId":"117","severity":1,"message":"118","line":9,"column":21,"nodeType":"119","endLine":9,"endColumn":48},{"ruleId":"123","severity":1,"message":"125","line":11,"column":17,"nodeType":"119","endLine":17,"endColumn":18},{"ruleId":"104","severity":1,"message":"120","line":6,"column":20,"nodeType":"106","messageId":"107","endLine":6,"endColumn":29},{"ruleId":"126","severity":1,"message":"127","line":13,"column":25,"nodeType":"119","endLine":19,"endColumn":27},{"ruleId":"104","severity":1,"message":"128","line":14,"column":22,"nodeType":"106","messageId":"107","endLine":14,"endColumn":33},{"ruleId":"104","severity":1,"message":"129","line":16,"column":20,"nodeType":"106","messageId":"107","endLine":16,"endColumn":30},{"ruleId":"104","severity":1,"message":"130","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":13},{"ruleId":"104","severity":1,"message":"131","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":29},{"ruleId":"117","severity":1,"message":"118","line":86,"column":13,"nodeType":"119","endLine":94,"endColumn":15},{"ruleId":"104","severity":1,"message":"132","line":3,"column":7,"nodeType":"106","messageId":"107","endLine":3,"endColumn":15},"@typescript-eslint/no-unused-vars","'setLoading' is assigned a value but never used.","Identifier","unusedVar","'getPosts' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getPost'. Either include it or remove the dependency array.","ArrayExpression",["133"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setAuthor' is assigned a value but never used.","'id' is assigned a value but never used.","'React' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'setPictures' is assigned a value but never used.","'getPicture' is defined but never used.","'axios' is defined but never used.","'responsiveFontSizes' is defined but never used.","'base_url' is assigned a value but never used.",{"desc":"134","fix":"135"},"Update the dependencies array to be: [_getPost, id]",{"range":"136","text":"137"},[1314,1318],"[_getPost, id]"]